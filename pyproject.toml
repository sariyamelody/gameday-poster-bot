[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mariners-bot"
dynamic = ["version"]
description = "A Telegram bot for Seattle Mariners game notifications"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "sariyamelody", email = "email@example.com"},
]
keywords = ["telegram", "bot", "mariners", "baseball", "mlb"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Games/Entertainment :: Board Games",
]

dependencies = [
    "python-telegram-bot[job-queue]>=21.5",
    "aiohttp>=3.9.0",
    "asyncio-throttle>=1.0.2",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "aiosqlite>=0.19.0",
    "alembic>=1.13.0",
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "structlog>=23.0.0",
    "uvicorn[standard]>=0.24.0",
    "fastapi>=0.104.0",
    "pytz>=2023.3",
    "apscheduler>=3.10.0",
    "tenacity>=8.2.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-instrumentation-aiohttp-client>=0.41b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.41b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "mypy>=1.7.0",
    "ruff>=0.1.7",
    "bandit>=1.7.5",
    "types-pytz>=2023.3.0.0",
]

[project.urls]
Homepage = "https://github.com/sariyamelody/gameday-poster-bot"
Documentation = "https://github.com/sariyamelody/gameday-poster-bot#readme"
Repository = "https://github.com/sariyamelody/gameday-poster-bot.git"
"Bug Tracker" = "https://github.com/sariyamelody/gameday-poster-bot/issues"

[project.scripts]
mariners-bot = "mariners_bot.main:main"

[tool.hatch.version]
path = "mariners_bot/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["mariners_bot"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
pythonpath = ["."]

[tool.coverage.run]
source = ["mariners_bot"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 100
respect-gitignore = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by line-length)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "SIM", "PTH"]

[tool.ruff.lint.isort]
known-first-party = ["mariners_bot"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

# Ignore untyped imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "apscheduler.*",
    "telegram.*",
    "asyncio_throttle.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [".venv", "tests"]
skips = ["B101", "B104", "B105", "B106", "B404", "B601", "B602", "B603", "B607", "B701"]